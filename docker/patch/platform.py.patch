--- a/platform.py
+++ a/platform.py
@@ -460,6 +460,33 @@
         return dict(super().stage1_constraints, **constraints)
 
 
+class Aarch64RPI(Platform):
+
+    @property
+    def stage1_suggestion(self):
+        """The platform-specific suggestion about the stage1 device."""
+        return _(
+            "You must include at least one MBR-formatted "
+            "disk as an install target."
+        )
+
+    @property
+    def stage1_descriptions(self):
+        """The platform-specific descriptions of the stage1 device."""
+        return {
+            "disk": _(MBR_DESCRIPTION),
+            "partition": _(PARTITION_DESCRIPTION)
+        }
+
+    @property
+    def stage1_constraints(self):
+        """The platform-specific constraints for the stage1 device."""
+        constraints = {
+            PLATFORM_DEVICE_TYPES: ["disk"]
+        }
+        return dict(super().stage1_constraints, **constraints)
+
+
 def get_platform():
     """Check the architecture of the system and return an instance of a
        Platform subclass to match.  If the architecture could not be determined,
@@ -492,6 +519,8 @@
         return X86()
     elif arch.is_arm():
         return ARM()
+    elif arch.is_aarch64():
+        return Aarch64RPI()
     else:
         raise SystemError("Could not determine system architecture.")
 
