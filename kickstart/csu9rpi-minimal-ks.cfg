# Generated by pykickstart v3.32
#version=RHEL9
# Firewall configuration
firewall --enabled --service=ssh
# Keyboard layouts
keyboard --vckeymap=jp --xlayouts='jp'
# System language
lang ja_JP.UTF-8
# Network information
network  --bootproto=dhcp --device=link --activate
# Shutdown after installation
shutdown
repo --name="celos-kernel" --baseurl=https://celos.dev/raspberrypi/kernel/9/aarch64/ --cost=10
repo --name="BaseOS" --mirrorlist=https://mirrors.centos.org/mirrorlist?path=/9-stream/BaseOS/aarch64/os/ --cost=100
repo --name="AppStream" --mirrorlist=https://mirrors.centos.org/mirrorlist?path=/9-stream/AppStream/aarch64/os/ --cost=10
repo --name="CRB" --mirrorlist=https://mirrors.centos.org/mirrorlist?path=/9-stream/CRB/aarch64/os/ --cost=10
# Root password
rootpw --iscrypted --lock locked
# SELinux configuration
selinux --enforcing
# System services
services --enabled="sshd,NetworkManager,chronyd"
timesource --ntp-disable
# System timezone
timezone Asia/Tokyo --utc
# Use network installation
url --mirrorlist="https://mirrors.centos.org/mirrorlist?path=/9-stream/BaseOS/aarch64/os/"
# System bootloader configuration
bootloader --location=none
# Partition clearing information
clearpart --all --initlabel
# Disk partitioning information
part /boot --asprimary --fstype="vfat" --size=512 --fsoptions="defaults" --label=boot
part / --asprimary --fstype="ext4" --size=1534 --fsoptions="defaults,noatime" --label=rootfs

%post
# Mandatory README file
cat >/root/README << EOF
== Community Enterprise Linux 9 for Raspberry Pi 3/4/5 ==

[install vcgencmd]
dnf install git gcc gcc-c++ cmake make
git clone https://github.com/raspberrypi/userland.git
cd userland
./buildme --aarch64
echo "/opt/vc/lib" > /etc/ld.so.conf.d/00-vmcs.conf
ldconfig
ln -s /opt/vc/bin/vcgencmd /usr/local/bin/vcgencmd

[install wi-fi firmware]
dnf install git
mkdir /opt/rpi/
cd /opt/rpi
git clone https://github.com/RPi-Distro/firmware-nonfree.git -b buster
ln -s /opt/rpi/firmware-nonfree/brcm/ /lib/firmware/brcm
reboot

[install rpi-eeprom]
dnf install git pciutils
mkdir /opt/rpi
cd /opt/rpi
git clone https://github.com/raspberrypi/rpi-eeprom.git
ln -s /opt/rpi/rpi-eeprom/rpi-eeprom-update-default /etc/default/rpi-eeprom-update
mkdir /lib/firmware/raspberrypi
ln -s /opt/rpi/rpi-eeprom/firmware-2711/ /lib/firmware/raspberrypi/bootloader
ln -s /opt/rpi/rpi-eeprom/rpi-eeprom-{config,digest,update} /usr/local/bin/
rpi-eeprom-update or rpi-eeprom-update -a
reboot
EOF

# Add unofficial repository of Community Enterprise Linux LTS Kernel for Raspberry Pi 
cat >/etc/yum.repos.d/celos-kernel.repo << 'EOF'
[celos-kernel]
name=Community-owned Enterprise Linux $releasever - LTS Kernel for RPi
baseurl=https://celos.dev/raspberrypi/kernel/9/aarch64/
enabled=1
gpgcheck=0
EOF

# Remove ifcfg-link on pre generated images
rm -f /etc/sysconfig/network-scripts/ifcfg-link

# Remove machine-id on pre generated images
rm -f /etc/machine-id
touch /etc/machine-id

%end

%post
# Specific cmdline.txt files needed for raspberrypi3/4
uuid_rootfs="$(cat /etc/fstab | awk -F'[ =]' '/\/ / {print $2}')"
partuuid_rootfs="$(blkid "$(blkid --uuid ${uuid_rootfs})"| awk '{print $NF}' | tr -d '"')"
cat > /boot/cmdline.txt << EOF
console=ttyAMA0,115200 console=tty1 root=${partuuid_rootfs} rootfstype=ext4 elevator=deadline rootwait
EOF

# Specific config.txt files 
cat > /boot/config.txt << EOF
# For more options and information see
# https://www.raspberrypi.org/documentation/computers/config_txt.html
# Some settings may impact device functionality. See link above for details

# Set overscan disabled
disable_overscan=1
# Set monitor mode to DMT
hdmi_group=1
# Set monitor resolution to 1024x768 XGA 60Hz (HDMI_DMT_XGA_60)
hdmi_mode=16
# Force the monitor to HDMI mode so that sound will be sent over HDMI cable
hdmi_drive=2
# Set disable onboard Wi-Fi
#dtoverlay=disable-wifi
# Set disable onboard Bluetooth
#dtoverlay=disable-bt
EOF

# Convert database from bdb_ro to sqlite backend
rpm --rebuilddb

%end

%post
# Get UUID of the rootfs partition
UUID_ROOTDEV="$(cat /etc/fstab | awk -F'[ =]' '/\/ / {print $1}')"
UUID_ROOTFS="$(blkid -s UUID ${UUID_ROOTDEV} | awk -F'[ =]' '{print $3}' | tr -d '"' )"

# Get UUID of the bootfs partition
UUID_BOOTDEV="$(cat /etc/fstab | awk -F'[ =]' '/\/boot / {print $1}')"
UUID_BOOTFS="$(blkid -s UUID ${UUID_BOOTDEV} | awk -F'[ =]' '{print $3}' | tr -d '"' )"

# Add the acquired UUID of the rootfs / bootfs partition to /etc/fstab
sed -i -e "s@${UUID_BOOTDEV}@UUID=${UUID_BOOTFS}@" -e "s@${UUID_ROOTDEV}@UUID=${UUID_ROOTFS}@" /etc/fstab

# Get the PARTUUID of the rootfs partition
PART_UUID_ROOTFS="$(blkid "$(blkid --uuid $UUID_ROOTFS)" | awk '{print $NF}' | tr -d '"' )"

# Configure the kernel commandline
sed -i "s/root= /root=${PART_UUID_ROOTFS} /" /boot/cmdline.txt

%end

%post
cat >> /root/README << 'EOF'

If you want to manually resize your / partition (as root user):
growpart /dev/mmcblk0 2
resize2fs /dev/mmcblk0p2
EOF
%end

%post
######################################################################
# Userconfig on firstboot
######################################################################
cp -a /etc/crontab{,.orig}

cat > /var/tmp/firstboot << 'EOF'
#!/bin/bash
#-------------------------------------------------------------------------------
# User settings
# group --name=pi --gid=5000
# user --groups=wheel --name=pi --password=raspberry --plaintext --uid=5000 --gecos="Default User for Raspberry Pi" --gid=5000
#-------------------------------------------------------------------------------
groupadd -g 5000 pi
useradd -u 5000 -g 5000 -G wheel -c "Default User for Raspberry Pi" pi
echo "raspberry" | passwd --stdin pi

mv -f /etc/crontab{.orig,}
rm -f $0
EOF

echo "@reboot root /bin/bash /var/tmp/firstboot" >> /etc/crontab

%end

%packages
@^minimal-environment
NetworkManager-wifi
chrony
cloud-utils-growpart
raspi-firmware
raspi4-kernel
raspi5-kernel
-dracut-config-rescue
-kernel
-kernel-core
-kernel-modules
-kernel-tools
-linux-firmware

%end
